# :tabSize=2:indentSize=2:wrap=hard:
# $Id: ChangeLogML.xsd 9 2009-01-21 00:02:06Z rjray $

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace cc = "http://web.resource.org/cc/"
namespace dc = "http://purl.org/dc/elements/1.1/"
namespace ns_1 = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
namespace rng = "http://relaxng.org/ns/structure/1.0"
default namespace tns = "http://www.blackperl.com/2009/01/ChangeLogML"
namespace xsd = "http://www.w3.org/2001/XMLSchema"

# Refer to this schema using the following namespace:
# http://www.blackperl.com/2009/01/ChangeLogML

a:documentation [
  "\x{a}" ~
  "    \x{a}" ~
  "      A description of an XML application which itemizes changes over the\x{a}" ~
  "      life-span of a software project. Changes are tracked by releases, with a\x{a}" ~
  "      granularity of individual items made up of files that were affected.\x{a}" ~
  "    \x{a}" ~
  "    \x{a}" ~
  "      "
  dc:creator [ "Randy J. Ray <rjray@blackperl.com>" ]
  "\x{a}" ~
  "      "
  dc:date [ "2009-01-01" ]
  "\x{a}" ~
  "      "
  dc:subject [ "changelog,xml,schema" ]
  "\x{a}" ~
  "      "
  dc:description [
    "\x{a}" ~
    "        An XML Schema describing an XML vocabulary for software project\x{a}" ~
    "        change-logs.\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "    \x{a}" ~
  "    \x{a}" ~
  "      "
  rdf:RDF [
    "\x{a}" ~
    "        "
    cc:Work [
      rdf:about = ""
      "\x{a}" ~
      "          "
      dc:title [ "XML Schema for Changelogs" ]
      "\x{a}" ~
      "          "
      dc:description [
        "\x{a}" ~
        "            An XML Schema describing an XML vocabulary for software project\x{a}" ~
        "            change-logs.\x{a}" ~
        "          "
      ]
      "\x{a}" ~
      "          "
      dc:creator [
        "\x{a}" ~
        "            "
        cc:Agent [
          "\x{a}" ~
          "              "
          dc:title [ "Randy J. Ray" ]
          "\x{a}" ~
          "            "
        ]
        "\x{a}" ~
        "          "
      ]
      "\x{a}" ~
      "          "
      dc:rights [
        "\x{a}" ~
        "            "
        cc:Agent [
          "\x{a}" ~
          "              "
          dc:title [ "Randy J. Ray" ]
          "\x{a}" ~
          "            "
        ]
        "\x{a}" ~
        "          "
      ]
      "\x{a}" ~
      "          "
      dc:type [ rdf:resource = "http://purl.org/dc/dcmitype/Text" ]
      "\x{a}" ~
      "          "
      cc:license [
        rdf:resource = "http://creativecommons.org/licenses/by-sa/2.0/"
      ]
      "\x{a}" ~
      "        "
    ]
    "\x{a}" ~
    "        "
    cc:License [
      rdf:about = "http://creativecommons.org/licenses/by-sa/2.0/"
      "\x{a}" ~
      "          "
      cc:permits [
        rdf:resource = "http://web.resource.org/cc/Reproduction"
      ]
      "\x{a}" ~
      "          "
      cc:permits [
        rdf:resource = "http://web.resource.org/cc/Distribution"
      ]
      "\x{a}" ~
      "          "
      cc:requires [ rdf:resource = "http://web.resource.org/cc/Notice" ]
      "\x{a}" ~
      "          "
      cc:requires [
        rdf:resource = "http://web.resource.org/cc/Attribution"
      ]
      "\x{a}" ~
      "          "
      cc:permits [
        rdf:resource = "http://web.resource.org/cc/DerivativeWorks"
      ]
      "\x{a}" ~
      "          "
      cc:requires [
        rdf:resource = "http://web.resource.org/cc/ShareAlike"
      ]
      "\x{a}" ~
      "        "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "    \x{a}" ~
  "  "
]

## 
##       
##         The versionString type is applied to attributes that describe simple
##         revision-number strings. It only supports dotted-decimal styled
##         version numbers.
##       
##     
versionString = xsd:string { pattern = "\d+(\.\d+)*" }

## 
##       
##         An informationType is an open-ended container type that allows
##         mixed-content which can include elements from other XML namespaces.
##         This allows users to include Dublin Core metadata, XHTML tags, etc. as
##         desired within the <description> and similar blocks. It also
##         allows for open-ended extension of ChangeLogML with things such as
##         source-control specification, etc.
##       
##     
informationType =
  element * { text },
  attribute source {
    
    ## 
    ##         
    ##           The source attribute, if present, is used to refer to any external
    ##           resource that may be related to the contents of the block-element
    ##           that has the attribute. The role or relevance of the reference is not
    ##           specified or constrained. The value of the attribute must be a URI,
    ##           but may be absolute, relative, or a reference to a fragment. The only
    ##           restriction is that it be a valid URI.
    ##         
    ##       
    xsd:anyURI
  }?,
  attribute * { text }

## 
##       
##         A descriptionType extends informationType to add a specific attribute,
##         called "lang", that specifies the (human) language the text of the
##         block is written in. This allows for a ChangeLog to have multiple
##         versions of the same <description> block in differing languages,
##         leaving it to processors of the document to choose which one to
##         display.
##       
##     
descriptionType =
  [ ns_1:defaultValue = "en-US" ]
  attribute lang {
    
    ## 
    ##             
    ##               This attribute specifies the language in which the content of
    ##               the <description> block is written. The value of the
    ##               attribute should be a language code (generally two characters,
    ##               possibly followed by an underscore and qualifying country-code
    ##               when the language is used by several countries), and the
    ##               default value is "en_US" (American English).
    ##             
    ##           
    xsd:language
  }

## 
##       
##         The fileType definition is used for the <file> element, a part
##         of the changeType declaration. It is defined separately so that it can
##         be referred to from multiple places.
##       
##     
fileType =
  element description {
    descriptionType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <description> block is optional, and may occur multiple\x{a}" ~
         "            times in different languages (as with all instances of this tag).\x{a}" ~
         "            It is used to describe the function or role of the file, and would\x{a}" ~
         "            generally only be used the first time a file is introduced.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }*,
  element source-control {
    informationType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            This block is optional, and may occur only once. If present, it is\x{a}" ~
         "            used to introduce source-control information specific to the\x{a}" ~
         "            current file. This can be useful if some elements of the project\x{a}" ~
         "            are spread across different source-control systems.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }?,
  attribute path {
    
    ## 
    ##         
    ##           This attribute provides the path-name of the file. In general, this
    ##           will be a path that is relative to the base directory of the project
    ##           itself, though there is no rule prohibiting absolute paths, or
    ##           presuming that paths are relative to some other location.
    ##         
    ##       
    xsd:string
  },
  attribute revision {
    versionString
    >> a:documentation [
         "\x{a}" ~
         "        \x{a}" ~
         "          An optional attribute, this indicates the revision, or version, of\x{a}" ~
         "          the file as it is being referred to in the current context. Some\x{a}" ~
         "          source-control systems (such as CVS) version files individually,\x{a}" ~
         "          while others (such as Subversion) version files in groups generally\x{a}" ~
         "          referred to as transactions.\x{a}" ~
         "        \x{a}" ~
         "      "
       ]
  }?,
  attribute author {
    
    ## 
    ##         
    ##           An optional attribute, this allows specification of the author of
    ##           the current revision of the file being described.
    ##         
    ##       
    xsd:NMTOKEN
  }?,
  
  ## 
  ##         
  ##           This attribute describes what the change to this file represents.
  ##           The value is restricted to one of the strings: ADD, CHANGE, DELETE,
  ##           MOVE or RESTORE. The default value is CHANGE, which simply means
  ##           the file was modified. The other labels represent the states at
  ##           which a file was added to the project, deleted from the project,
  ##           moved within the file-system, or restored from a deleted state.
  ##         
  ##       
  [ ns_1:defaultValue = "CHANGE" ]
  attribute action {
    "ADD" | "CHANGE" | "DELETE" | "MOVE" | "RESTORE"
  }?,
  attribute * { text }
start |= file
file =
  element file {
    fileType
    >> a:documentation [
         "\x{a}" ~
         "      \x{a}" ~
         "        A file element describes one changed file as part of a containing\x{a}" ~
         "        <change> or <fileset> element.\x{a}" ~
         "      \x{a}" ~
         "    "
       ]
  }

## 
##       
##         The changeType declaration is used to define the structure of the
##         <change> blocks. Each such block describes a single change to
##         the project; this change may affect only one file, or it may affect
##         many files. What each change has in common, is that it requires the
##         specification of one or more affected files, as well as a description
##         of the change itself.
##       
##     
changeType =
  
  ## 
  ##           
  ##             For specifying the files affected by the change, the document
  ##             may use one of two options: <file> or <fileset>. If
  ##             the change affects only one file, a single <file> may be
  ##             used. Otherwise, multiple files must be contained within an
  ##             enclosing <fileset>. A <fileset> containing exactly
  ##             one <file> tag should be considered functionally equivalent
  ##             to just the stand-alone <file> tag itself.
  ##           
  ##         
  (file
   >> a:documentation [
        "\x{a}" ~
        "            \x{a}" ~
        "              When the change affects just one file, this element is used\x{a}" ~
        "              to specify and describe that file.\x{a}" ~
        "            \x{a}" ~
        "          "
      ]
   | 
     ## 
     ##             
     ##               A <fileset> is a container for one or more <file>
     ##               tags, though it is more efficient to use a single <file>
     ##               element if there is only one changed file. All files in the
     ##               container are considered to be part of the same change, and in
     ##               terms of source-control are regarded as having been committed
     ##               to the repository at the same time.
     ##             
     ##           
     element fileset {
       element source-control {
         informationType
         >> a:documentation [
              "\x{a}" ~
              "                  \x{a}" ~
              "                    This block is optional, and may occur only once. If\x{a}" ~
              "                    present, it is used to introduce source-control\x{a}" ~
              "                    information specific to the fileset/change. As some\x{a}" ~
              "                    source-control systems (such as Subversion) handle groups\x{a}" ~
              "                    of changed files as a single transaction, it may be more\x{a}" ~
              "                    economical to specify source-control information at this\x{a}" ~
              "                    level rather than for each file within the child-element\x{a}" ~
              "                    <fileset> individually.\x{a}" ~
              "                  \x{a}" ~
              "                "
            ]
       }?,
       file
       >> a:documentation [
            "\x{a}" ~
            "                  \x{a}" ~
            "                    One or more <file> elements must be present, with\x{a}" ~
            "                    no limit on the number allowed. The structure of the\x{a}" ~
            "                    block is the same at this level as for a single,\x{a}" ~
            "                    stand-alone instance of <file>.\x{a}" ~
            "                  \x{a}" ~
            "                "
          ]+,
       attribute revision {
         versionString
         >> a:documentation [
              "\x{a}" ~
              "                \x{a}" ~
              "                  A <fileset> may specify a single revision which\x{a}" ~
              "                  applies to all files in the contained <file>\x{a}" ~
              "                  elements.\x{a}" ~
              "                \x{a}" ~
              "              "
            ]
       }?,
       attribute * { text }
     }),
  element description {
    descriptionType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            Within the <change> block, a <description> element\x{a}" ~
         "            represents the description of the change, in a manner similar to\x{a}" ~
         "            the comments provided to source-control systems when files are\x{a}" ~
         "            committed.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }+,
  attribute author {
    
    ## 
    ##         
    ##           An optional attribute, this allows specification of the author of
    ##           the current change-set being described. This is useful if the whole
    ##           of a change is credited to one committer, as opposed to specifying the
    ##           same author for every file in the <fileset> block.
    ##         
    ##       
    xsd:NMTOKEN
  }?,
  attribute date {
    
    ## 
    ##         
    ##           The "date" attribute details when the change was submitted, committed
    ##           to version-control, etc. It uses the "dateTime" data-format as defined
    ##           by the XML Schema standard, which is the ISO 8601 format for dates and
    ##           times. Although ISO 8601 allows strings that specify only the date or
    ##           time portions, the value of this attribute must contain at least the
    ##           date, if not a full specification.
    ##         
    ##       
    xsd:dateTime
  }?,
  attribute id {
    
    ## 
    ##         
    ##           A changeType instance may specify a unique ID by which it can
    ##           be referred to from external documents. The value of this attribute
    ##           must be unique across all "id" attributes in the document, and
    ##           must conform to the XML Schema definition of an identifier token.
    ##         
    ##       
    xsd:ID
  }?,
  attribute * { text }
start |= change
change =
  element change {
    changeType
    >> a:documentation [
         "\x{a}" ~
         "      \x{a}" ~
         "        A change element defines one change within a release. The change itself\x{a}" ~
         "        may cover several files, but the single description within the change\x{a}" ~
         "        applies to all files referenced within.\x{a}" ~
         "      \x{a}" ~
         "    "
       ]
  }

## 
##       
##         The releaseType is the primary piece of information that a ChangeLogML
##         file collects and organizes. A release contains an optional description
##         and other informational blocks, followed by one or more change
##         blocks. The release element is also the greatest user of attributes
##         besides the file element. A releaseType instance must have at least a
##         "version" attribute, uniquely identifying the release itself.
##         Additionally, it must have a "date" attribute to specify the date the
##         release was created.
##       
##     
releaseType =
  element description {
    descriptionType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <description> element in a release describes the release\x{a}" ~
         "            as a whole, acting as a summary of the release itself.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }*,
  element information {
    informationType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <information> element is a container which may be used\x{a}" ~
         "            to provide meta-data such as Dublin Core, etc., that is more\x{a}" ~
         "            specific to the release than any general meta-data provided in the\x{a}" ~
         "            <changelog> element's <information> container.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }*,
  element source-control {
    informationType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <source-control> element for a release acts as a\x{a}" ~
         "            container for information on source-control that is specific to the\x{a}" ~
         "            release, more specific than information contained within any\x{a}" ~
         "            <source-control> block for the <changelog> element.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }?,
  element change {
    changeType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <change> element is an instance of the type,\x{a}" ~
         '            "changeType". One or more of these blocks must be present in a\x{a}' ~
         "            <release> block. There is no upper-limit to the number of\x{a}" ~
         "            <change> blocks allowed.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }+,
  attribute version {
    
    ## 
    ##         
    ##           The "version" attribute represents the version by which the release
    ##           of the project is represented. It should be unique, though it is not
    ##           treated in the same way as the "id" attribute; uniqueness is managed
    ##           as a function of the schema rather than the definition of the type of
    ##           data it can contain. It is not restricted to numerals and periods, as
    ##           file revision-numbers are.
    ##         
    ##       
    xsd:token
  },
  attribute date {
    
    ## 
    ##         
    ##           The "date" attribute details when the release was made available,
    ##           bundled, etc. It uses the "dateTime" data-format as defined by the
    ##           XML Schema standard, which is the ISO 8601 format for dates and
    ##           times. Although ISO 8601 allows strings that specify only the date or
    ##           time portions, the value of this attribute must contain at least the
    ##           date, if not a full specification.
    ##         
    ##       
    xsd:dateTime
  },
  attribute id {
    
    ## 
    ##         
    ##           A releaseType instance may specify a unique ID by which it can
    ##           be referred to from external documents. The value of this attribute
    ##           must be unique across all "id" attributes in the document, and
    ##           must conform to the XML Schema definition of an identifier token.
    ##         
    ##       
    xsd:ID
  }?,
  attribute * { text }
start |= release
release =
  element release {
    releaseType
    >> a:documentation [
         "\x{a}" ~
         "      \x{a}" ~
         "        The release element details one release within the overall change-log\x{a}" ~
         "        itself. Because the release element has a required attribute that\x{a}" ~
         "        provides a time-stamp, releases may appear in any order within the\x{a}" ~
         "        change-log, since processors can sort the elements by their relative\x{a}" ~
         "        dates.\x{a}" ~
         "      \x{a}" ~
         "    "
       ]
  }

## 
##       
##         The subprojectType is a way of allowing a project to express
##         relationship to one or more sub-projects within itself, such that the
##         sub-projects are able to have their own changelogs and release
##         schedules. An instance of subprojectType may explicitly contain
##         <release> blocks (that may or may not simply be replicated from
##         the sub-project's own ChangeLogML), or it may use a facility such as
##         XInclude (or m4 pre-processed, etc.) to dynamically include such blocks
##         from the sub-project.
##       
##     
subprojectType =
  element description {
    descriptionType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <description> block for a subprojectType instance is used\x{a}" ~
         "            to provide a summary of the sub-project, like an abstract or\x{a}" ~
         "            overview for an article.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }+,
  element information {
    informationType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <information> block is an open-ended container that\x{a}" ~
         "            allows content from other XML namespaces to be included, for such\x{a}" ~
         "            things as Dublin Core Metadata, Creative Commons information, etc.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }*,
  element source-control {
    informationType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            Like the previous, the <source-control> block is an\x{a}" ~
         "            open-ended container for the inclusion of content from additional\x{a}" ~
         "            namespaces. However, this container is intended to be specifically\x{a}" ~
         "            used for information on the source-control system employed by the\x{a}" ~
         "            project.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }?,
  release
  >> a:documentation [
       "\x{a}" ~
       "          \x{a}" ~
       "            Lastly, the subprojectType instance will contain zero or more\x{a}" ~
       "            <release> blocks. Ideally these will occur in order, either\x{a}" ~
       "            ascending or descending, of the dates of the given releases. This\x{a}" ~
       "            is optional, since any processor will be capable of sorting the\x{a}" ~
       '            blocks on their "date" attributes.\x{a}' ~
       "          \x{a}" ~
       "        "
     ]*,
  attribute id {
    
    ## 
    ##         
    ##           A subprojectType instance may specify a unique ID by which it can
    ##           be referred to from external documents. The value of this attribute
    ##           must be unique across all "id" attributes in the document, and
    ##           must conform to the XML Schema definition of an identifier token.
    ##         
    ##       
    xsd:ID
  }?,
  attribute name {
    
    ## 
    ##         
    ##           An required attribute, this specifies the name of the sub-project.
    ##           A schema-level constraint is used to ensure that names are unique
    ##           between instances of subprojectType.
    ##         
    ##       
    xsd:NMTOKEN
  }
start |= subproject
subproject =
  element subproject {
    subprojectType
    >> a:documentation [
         "\x{a}" ~
         "      \x{a}" ~
         "        The subproject element sets up a child-project that is considered part\x{a}" ~
         "        of the main project, but which may release on its own, separate\x{a}" ~
         "        schedule. The parent project may replicate the child's release history\x{a}" ~
         "        into its own ChangeLogML file, or it may use XInclude elements to import\x{a}" ~
         "        it.\x{a}" ~
         "      \x{a}" ~
         "    "
       ]
  }

## 
##       
##         An instance of changelogType will generally be the root-level element
##         in a ChangeLogML document. It contains the project-level information
##         such as name, summary, etc. as well as acting as a container for the
##         <release> blocks that actually iterate the project's change
##         history.
##       
##     
changelogType =
  element project {
    
    ## 
    ##           
    ##             This is the name of the project that this changelog covers.
    ##           
    ##         
    xsd:string
  },
  element title {
    
    ## 
    ##           
    ##             This is the title for the project, a sort of longer "name" that can
    ##             be used for web pages, etc.
    ##           
    ##         
    xsd:string
  }?,
  element description {
    descriptionType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <description> block for a changelogType instance is used\x{a}" ~
         "            to provide a summary of the project, like an abstract or overview\x{a}" ~
         "            for an article.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }+,
  element information {
    informationType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            The <information> block is an open-ended container that\x{a}" ~
         "            allows content from other XML namespaces to be included, for such\x{a}" ~
         "            things as Dublin Core Metadata, Creative Commons information, etc.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }*,
  element source-control {
    informationType
    >> a:documentation [
         "\x{a}" ~
         "          \x{a}" ~
         "            Like the previous, the <source-control> block is an\x{a}" ~
         "            open-ended container for the inclusion of content from additional\x{a}" ~
         "            namespaces. However, this container is intended to be specifically\x{a}" ~
         "            used for information on the source-control system employed by the\x{a}" ~
         "            project.\x{a}" ~
         "          \x{a}" ~
         "        "
       ]
  }?,
  release
  >> a:documentation [
       "\x{a}" ~
       "          \x{a}" ~
       "            The changelogType instance will contain zero or more <release>\x{a}" ~
       "            blocks. Ideally these will occur in order, either ascending or\x{a}" ~
       "            descending, of the dates of the given releases. This is optional,\x{a}" ~
       "            since any processor will be capable of sorting the blocks on their\x{a}" ~
       '            "date" attributes.\x{a}' ~
       "          \x{a}" ~
       "        "
     ]*,
  subproject
  >> a:documentation [
       "\x{a}" ~
       "          \x{a}" ~
       "            Lastly, the changelogType instance may contain zero or more\x{a}" ~
       "            <subproject> blocks. These blocks provide information on\x{a}" ~
       "            sub-projects of the main project, and are distinguished by a unique\x{a}" ~
       '            "name" attribute on each block. These elements may be null, since\x{a}' ~
       "            there is no requirement that a sub-project have any releases before\x{a}" ~
       "            the parent project does.\x{a}" ~
       "          \x{a}" ~
       "        "
     ]*,
  attribute id {
    
    ## 
    ##         
    ##           A changelogType instance may specify a unique ID by which it can
    ##           be referred to from external documents. The value of this attribute
    ##           must be unique across all "id" attributes in the document, and
    ##           must conform to the XML Schema definition of an identifier token.
    ##         
    ##       
    xsd:ID
  }?
start |= changelog
changelog =
  element changelog {
    changelogType
    >> a:documentation [
         "\x{a}" ~
         "      \x{a}" ~
         "        The changelog element is intended as the document root element. It\x{a}" ~
         "        contains descriptive elements (<description>,\x{a}" ~
         "        <source-control>, etc.) and one or more release blocks.\x{a}" ~
         "      \x{a}" ~
         "    "
       ]
  }
